Execute (Provide util fns):
  func! Build()
    return hearth#util#ns_ast#Build(getline(0, line('$')))
  endfunc
  func! Write(ast)
    " there ought to be a better way:
    norm ggdG
    let lines = split(a:ast.ToString(), "\n", 1)
    call append(0, lines)
    norm Gdd
  endfunc

"
" =========================================================
"

Given clojure (Empty ns):
  (ns serenity.core)

Execute (Build AST):
  let ast = Build()
  AssertEqual 'form', ast.type
  AssertEqual 'ns', ast.first
  AssertEqual '(ns serenity.core)', ast.ToString()
  AssertEqual v:null, ast.FindClause(':require')


"
" =========================================================
"

Given clojure (ns with single :require):
  (ns serenity.core
    (:require [serenity.cargo :as cargo]))

Execute (Build AST and find serenity.cargo require clause, :as arg):
  let ast = Build()
  let vector = ast.FindClause('serenity.cargo')
  AssertEqual v:t_dict, type(vector)
  AssertEqual 'vector', vector.type
  AssertEqual 'form', vector.parent.type
  AssertEqual 'cargo', vector.FindKeywordValue(':as').value


"
" =========================================================
"

Given clojure (ns with single :require):
  (ns serenity.core
    (:require [serenity.cargo :as cargo]))

Execute (Build AST):
  let ast = Build()
  AssertEqual 'form', ast.type
  AssertEqual 'ns', ast.first
  AssertEqual "\n", ast.children[2].value

  let require = ast.FindClause(':require')
  AssertEqual 'form', require.type
  AssertEqual ':require', require.first
  AssertEqual 2, len(require.children)
  AssertEqual 'ws', require.children[0].kind
  AssertEqual 'vector', require.children[1].type
  call Write(ast)

Expect clojure (Produce identical result):
  (ns serenity.core
    (:require [serenity.cargo :as cargo]))


"
" =========================================================
"

Given clojure (Empty ns):
  (ns serenity.core)

Execute (Add :require form):
  let ast = Build()
  call ast.Append('(:require [serenity.cargo :as cargo])')
  call Write(ast)

Expect clojure (Properly indent new form):
  (ns serenity.core
    (:require [serenity.cargo :as cargo]))


"
" =========================================================
"

Given clojure (Single :require ns):
  (ns serenity.core
    (:require [serenity.cargo :as cargo]))

Execute (Add vector to :require form):
  let ast = Build()
  let require = ast.FindClause(':require')
  call require.Append('[serenity.util :as util]')
  call Write(ast)

Expect clojure (Properly indent new form):
  (ns serenity.core
    (:require [serenity.cargo :as cargo]
              [serenity.util :as util]))


"
" =========================================================
"

Given clojure (Single :require ns on its own line):
  (ns serenity.core
    (:require
      [serenity.cargo :as cargo]))

Execute (Add vector to :require form):
  let ast = Build()
  let require = ast.FindClause(':require')
  call require.Append('[serenity.util :as util]')
  call Write(ast)

Expect clojure (Properly indent new form):
  (ns serenity.core
    (:require
      [serenity.cargo :as cargo]
      [serenity.util :as util]))


"
" =========================================================
"

Given clojure (ns with single :require and :refer):
  (ns serenity.core
    (:require [serenity.cargo :refer [geisha-dolls]]))

Execute (Sorted Insert of literal into a :refer vector at beginning):
  let ast = Build()
  let vector = ast.FindClause('serenity.cargo')
  let refer = vector.FindKeywordValue(':refer')
  call refer.SortedInsertLiteral('beef')
  call Write(ast)

Expect clojure (Properly indent new form):
  (ns serenity.core
    (:require [serenity.cargo :refer [beef geisha-dolls]]))
