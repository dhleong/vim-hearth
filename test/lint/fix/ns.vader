Include: _setup.vader

"
" =========================================================
"

Given clojure (Empty ns):
  (ns serenity.core)

Execute (Insert first :require):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Inserted first :require):
  (ns serenity.core
    (:require [serenity.cargo :as cargo]))


"
" =========================================================
"

Given clojure (Empty ns + code):
  (ns serenity.core)

  (println "Stay Flyin'")

Execute (Insert first :require):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Kept code):
  (ns serenity.core
    (:require [serenity.cargo :as cargo]))

  (println "Stay Flyin'")


"
" =========================================================
"

Given clojure (Simple ns with a single :require entry):
  (ns serenity.core
    (:require [clojure.string :as str]))

Execute (Insert ns at end):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Inserted at end):
  (ns serenity.core
    (:require [clojure.string :as str]
              [serenity.cargo :as cargo]))

"
" =========================================================
"

Given clojure (Simple ns with a single :require entry):
  (ns serenity.core
    (:require [serenity.cargo :as cargo]))

Execute (Insert clojure ns at beginning):
  call InsertNs('clojure.string', 'as', 'str')

Expect clojure (Inserted at beginning):
  (ns serenity.core
    (:require [clojure.string :as str]
              [serenity.cargo :as cargo]))

"
" =========================================================
"

Given clojure (Simple ns with multiple :require entries):
  (ns serenity.core
    (:require [clojure.string :as str]
              [serenity.util :as util]))

Execute (Insert ns in middle):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Inserted in correct place):
  (ns serenity.core
    (:require [clojure.string :as str]
              [serenity.cargo :as cargo]
              [serenity.util :as util]))

"
" =========================================================
"

Given clojure (Simple ns with single, nested :require entry):
  (ns serenity.core
    (:require [serenity
               [util :as util]]))

Execute (Insert nested ns in middle):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Nested insert in middle):
  (ns serenity.core
    (:require [serenity
               [cargo :as cargo]
               [util :as util]]))

"
" =========================================================
"

Given clojure (Simple ns with single, nested :require entry):
  (ns serenity.core
    (:require [serenity
               [cargo :as cargo]]))

Execute (Insert nested ns at end):
  call InsertNs('serenity.util', 'as', 'util')

Expect clojure (Nested insert at end):
  (ns serenity.core
    (:require [serenity
               [cargo :as cargo]
               [util :as util]]))

"
" =========================================================
"

Given clojure (Simple ns with existing refer):
  (ns serenity.core
    (:require [serenity.cargo :as sneaky]))

Execute (Add different :as clause):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Don't create a duplicate alias):
  (ns serenity.core
    (:require [serenity.cargo :as sneaky]))

"
" =========================================================
"

Given clojure (Simple ns with existing refer):
  (ns serenity.core
    (:require [serenity.cargo :refer [geisha-dolls]]))

Execute (Add :as clause):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Insert :as clause):
  (ns serenity.core
    (:require [serenity.cargo :as cargo :refer [geisha-dolls]]))

"
" =========================================================
"

Given clojure (Single :require entry on its own line):
  (ns serenity.core
    (:require
      [clojure.string :as str]))

Execute (Insert ns at end):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Inserted at end):
  (ns serenity.core
    (:require
      [clojure.string :as str]
      [serenity.cargo :as cargo]))

"
" =========================================================
"

Given clojure (Single :require entry on its own line):
  (ns serenity.core
    (:require
      [serenity.util :as util]))

Execute (Insert ns at end):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Inserted at beginning):
  (ns serenity.core
    (:require
      [serenity.cargo :as cargo]
      [serenity.util :as util]))
"
" =========================================================
"

Given clojure (Multiple :require entries on their own lines):
  (ns serenity.core
    (:require
      [clojure.string :as str]
      [serenity.util :as util]))

Execute (Insert ns at end):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Inserted at end):
  (ns serenity.core
    (:require
      [clojure.string :as str]
      [serenity.cargo :as cargo]
      [serenity.util :as util]))


"
" =========================================================
"

Given clojure (Single, nested :require entry on its own line):
  (ns serenity.core
    (:require
      [serenity
       [util :as util]]))

Execute (Insert nested ns in middle):
  call InsertNs('serenity.cargo', 'as', 'cargo')

Expect clojure (Nested insert in middle):
  (ns serenity.core
    (:require
      [serenity
       [cargo :as cargo]
       [util :as util]]))


"
" =========================================================
"

Given clojure (Simple ns with existing paren-refer):
  (ns serenity.core
    (:require [serenity.util :refer (cry-baby)]))

Execute (Add new paren-refer clause):
  call InsertNs('serenity.cargo', 'refer', 'geisha-dolls')

Expect clojure (Insert :as clause):
  (ns serenity.core
    (:require [serenity.cargo :refer (geisha-dolls)]
              [serenity.util :refer (cry-baby)]))
