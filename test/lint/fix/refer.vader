Include: _setup.vader

"
" =========================================================
"

Given clojure (Empty ns):
  (ns serenity.core)

Execute (Insert first :require):
  call InsertNs('serenity.cargo', 'refer', 'geisha-dolls')

Expect clojure (Inserted first :require):
  (ns serenity.core
    (:require [serenity.cargo :refer [geisha-dolls]]))

"
" =========================================================
"

Given clojure (Single refer):
  (ns serenity.core
    (:require [serenity.cargo :refer [medicine]]))

Execute (Add new :require):
  call InsertNs('serenity.cargo', 'refer', 'geisha-dolls')

Expect clojure (Insert new :require):
  (ns serenity.core
    (:require [serenity.cargo :refer [geisha-dolls medicine]]))

"
" =========================================================
"

Given clojure (Single refer):
  (ns serenity.core
    (:require [serenity.cargo :refer [geisha-dolls]]))

Execute (Append new :require):
  call InsertNs('serenity.cargo', 'refer', 'medicine')

Expect clojure (Insert new :require):
  (ns serenity.core
    (:require [serenity.cargo :refer [geisha-dolls medicine]]))

"
" =========================================================
"

Given clojure (Multi-refer):
  (ns serenity.core
    (:require [serenity.cargo :refer [beef medicine]]))

Execute (Add new :require in-between):
  call InsertNs('serenity.cargo', 'refer', 'geisha-dolls')

Expect clojure (Added new :require):
  (ns serenity.core
    (:require [serenity.cargo :refer [beef geisha-dolls medicine]]))

"
" =========================================================
"

Given clojure (Multi-nested requires):
  (ns serenity.core
    (:require [serenity
               [cargo :refer [medicine]]
               [fuel :as fuel]]))

Execute (Insert :refer before nested):
  call InsertNs('alliance.ships', 'refer', 'magellan')

Expect clojure (Inserted before nested form):
  (ns serenity.core
    (:require [alliance.ships :refer [magellan]]
              [serenity
               [cargo :refer [medicine]]
               [fuel :as fuel]]))

"
" =========================================================
"

Given clojure (Multi-nested requires):
  (ns serenity.core
    (:require [serenity
               [cargo :refer [medicine]]
               [fuel :as fuel]]))

Execute (Insert :refer after nested):
  call InsertNs('star.wars', 'refer', 'spaceships')

Expect clojure (Inserted after nested form):
  (ns serenity.core
    (:require [serenity
               [cargo :refer [medicine]]
               [fuel :as fuel]]
              [star.wars :refer [spaceships]]))

"
" =========================================================
"

Given clojure (Single :as clause):
  (ns serenity.core
    (:require [serenity.cargo :as totally-legal]))

Execute (Insert :refer):
  call InsertNs('serenity.cargo', 'refer', 'geisha-dolls')

Expect clojure (Add :refer to :as clause):
  (ns serenity.core
    (:require [serenity.cargo :as totally-legal :refer [geisha-dolls]]))


